{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/bQuery.ts"],"names":["i","c","u","Error","code","exports"],"mappings":"CAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,SAAAC,EAAAD,EAAAA,GAAA,IAAAC,EAAAD,GAAA,CAAA,IAAAC,EAAAD,GAAA,CAAA,IAAAC,EAAA,mBAAAD,SAAAA,QAAAA,IAAAA,GAAAA,EAAAA,OAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,OAAAE,EAAAF,GAAAG,GAAA,MAAAA,EAAAA,IAAAA,MAAA,uBAAAC,EAAAA,MAAAA,KAAA,mB,ECEAC,EAAAA,EAAAA,G,SAAAA,IAAAA,EAAAA,G,QAAAA,EAAAA,Q,SAAAA,GAAAA,O,EAAAA,EAAAA,GAAAA,GAAAA,I,IAAAA,EAAAA,EAAAA,QAAAA,EAAAA,EAAAA,E,UAAAA,EAAAA,GAAAA,QAAAA,I,MAAAA,mB,SAAAA,QAAAA,EAAAA,EAAAA,EAAAA,E,OAAAA,IAAAA,EAAAA,EAAAA,IAAAA,OAAAA,E,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA","file":"bQuery.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿import \"./global\";\r\n\r\n(() => {\r\n    var version = \"3.0.0\";\r\n    var DotNet = window.DotNet;\r\n\r\n    //#region interfaces\r\n\r\n    interface IEventConvertor {\r\n        toMouseEvent: any,\r\n        toDragEventArgs: any,\r\n        toFocusEventArgs: any,\r\n        toTouchEventArgs: any,\r\n        toKeyboardEventArgs: any,\r\n        toTouchPoints: any,\r\n        toTouchPoint: any,\r\n    }\r\n\r\n    interface IDragOptions {\r\n        inViewport: boolean;\r\n        dragElement: HTMLElement | string | null;\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n    // used for:\r\n    // drag document.mousemove、window.resize\r\n    var dragThrottleTicks = 30;\r\n\r\n    // used for:\r\n    // window.onmouseover、window.onmouseout、window.onmousemove\r\n    // window.onresize、window.onscroll\r\n    // window.ontouchstart、window.ontouchmove、 window.ontouchend、window.ontouchcancel\r\n    var defaultThrottleTicks = 80;\r\n\r\n    //#region common\r\n\r\n    /**\r\n     * 防抖，适合多次事件一次响应的情况\r\n     * 应用场合：提交按钮的点击事件。\r\n     * @param fn\r\n     * @param wait\r\n     */\r\n    function debounce(fn, wait = 1000) {\r\n        var timer = null;\r\n        return function (...args) {\r\n            var context = this;\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n            timer = window.setTimeout(() => {\r\n                //var arr = Array.prototype.slice.call(args);\r\n                fn.apply(context, args);\r\n            }, wait);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 节流，强制函数以固定的速率执行\r\n     * 会用在比input, keyup更频繁触发的事件中，如resize, touchmove, mousemove, scroll。\r\n     * throttle 会强制函数以固定的速率执行。因此这个方法比较适合应用于动画相关的场景。\r\n     * @param fn\r\n     * @param threshold\r\n     */\r\n    function throttle(fn, threshold = 160) {\r\n        let timeout;\r\n        var start = +new Date;\r\n        return function (...args) {\r\n            let context = this, curTime = +new Date() - 0;\r\n            //总是干掉事件回调\r\n            window.clearTimeout(timeout);\r\n            if (curTime - start >= threshold) {\r\n                //只执行一部分方法，这些方法是在某个时间段内执行一次\r\n                fn.apply(context, args);\r\n                start = curTime;\r\n            }\r\n            else {\r\n                //让方法在脱离事件后也能执行一次\r\n                timeout = window.setTimeout(() => {\r\n                    //@ts-ignore\r\n                    fn.apply(this, args);\r\n                }, threshold);\r\n            }\r\n        };\r\n    }\r\n\r\n    function getDom(element: string | Element | null) {\r\n        if (!element) {\r\n            element = document.body;\r\n        } else if (typeof element === 'string') {\r\n            element = document.querySelector(element);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region base\r\n\r\n    var eventConvertor: IEventConvertor = {\r\n        toMouseEvent(e) {\r\n            return {\r\n                detail: e.detail,\r\n                screenX: e.screenX,\r\n                screenY: e.screenY,\r\n                clientX: e.clientX,\r\n                clientY: e.clientY,\r\n                button: e.button,\r\n                buttons: e.buttons,\r\n                ctrlKey: e.ctrlKey,\r\n                shiftKey: e.shiftKey,\r\n                altKey: e.altKey,\r\n                metaKey: e.metaKey,\r\n                type: e.type\r\n            };\r\n        },\r\n        toDragEventArgs(e) {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            obj.dataTransfer = {\r\n                dropEffect: e.dropEffect,\r\n                effectAllowed: e.effectAllowed,\r\n                files: e.files,\r\n                items: e.items,\r\n                types: e.types\r\n            };\r\n\r\n            return obj;\r\n        },\r\n        toFocusEventArgs(e) {\r\n            return {\r\n                type: e.type\r\n            }\r\n        },\r\n        toTouchEventArgs(e) {\r\n            return {\r\n                detail: e.detail,\r\n                touches: eventConvertor.toTouchPoints(e.touches),\r\n                targetTouches: eventConvertor.toTouchPoints(e.targetTouches),\r\n                changedTouches: eventConvertor.toTouchPoints(e.changedTouches),\r\n                ctrlKey: e.ctrlKey,\r\n                shiftKey: e.shiftKey,\r\n                altKey: e.altKey,\r\n                metaKey: e.metaKey,\r\n                type: e.type\r\n            }\r\n        },\r\n        toKeyboardEventArgs(e) {\r\n            return {\r\n                key: e.key,\r\n                code: e.code,\r\n                location: e.location,\r\n                repeat: e.repeat,\r\n                ctrlKey: e.ctrlKey,\r\n                shiftKey: e.shiftKey,\r\n                altKey: e.altKey,\r\n                metaKey: e.metaKey,\r\n                type: e.type\r\n            }\r\n        },\r\n        toTouchPoints(pts) {\r\n            var touches = [];\r\n            for (var i = 0; i < pts.length; i++) {\r\n                touches.push(eventConvertor.toTouchPoint(pts[i]));\r\n            }\r\n            return touches;\r\n        },\r\n        toTouchPoint(pt) {\r\n            return {\r\n                identifier: pt.identifier,\r\n                screenX: pt.screenX,\r\n                screenY: pt.screenY,\r\n                clientX: pt.clientX,\r\n                clientY: pt.clientY,\r\n                pageX: pt.pageX,\r\n                pageY: pt.pageY\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBq(): BQuery {\r\n        return window.bQuery;\r\n    }\r\n\r\n    //#endregion \r\n\r\n    //#region viewport\r\n    const viewport = {\r\n        getWidth: () => {\r\n            return document.documentElement.clientWidth;\r\n        },\r\n        getHeight: () => {\r\n            return document.documentElement.clientHeight;\r\n        },\r\n        getWidthAndHeight: () => {\r\n            var r = [\r\n                getBq().viewport.getWidth(),\r\n                getBq().viewport.getHeight()\r\n            ];\r\n            return r;\r\n        },\r\n\r\n        getScrollWidth: function () {\r\n            return document.documentElement.scrollWidth;\r\n        },\r\n        getScrollHeight: function () {\r\n            return document.documentElement.scrollHeight;\r\n        },\r\n        getScrollWidthAndHeight: function () {\r\n            return [\r\n                getBq().viewport.getScrollWidth(),\r\n                getBq().viewport.getScrollHeight()\r\n            ];\r\n        },\r\n        getScrollLeft: function () {\r\n            return document.documentElement.scrollLeft;\r\n        },\r\n        getScrollTop: function () {\r\n            return document.documentElement.scrollTop;\r\n        },\r\n        getScrollLeftAndTop: function () {\r\n            return [\r\n                getBq().viewport.getScrollLeft(),\r\n                getBq().viewport.getScrollTop()\r\n            ];\r\n        }\r\n\r\n    }\r\n\r\n    class BQuery {\r\n        public viewport = viewport;\r\n        public version = version;\r\n\r\n        getUserAgent() {\r\n            return navigator.userAgent;\r\n        }\r\n\r\n        // [obsolete]: Blazor has a native implementation\r\n        focus(element) {\r\n            element.focus();\r\n        }\r\n\r\n        //#region width height\r\n\r\n        getWidth(element, outer) {\r\n            if (outer) {\r\n                return element.offsetWidth;\r\n            } else {\r\n                return element.clientWidth;\r\n            }\r\n        };\r\n\r\n        getHeight(element, outer) {\r\n            if (outer) {\r\n                return element.offsetHeight;\r\n            } else {\r\n                return element.clientHeight;\r\n            }\r\n        };\r\n\r\n        getWidthAndHeight = (element, outer) => {\r\n            var r = [\r\n                getBq().getWidth(element, outer),\r\n                getBq().getHeight(element, outer)\r\n            ];\r\n            return r;\r\n        };\r\n\r\n        //#endregion\r\n\r\n\r\n        //#region element's Scroll\r\n\r\n        getScrollWidth(element) {\r\n            return element.scrollWidth;\r\n        }\r\n\r\n        getScrollHeight(element) {\r\n            return element.scrollHeight;\r\n        }\r\n\r\n        getScrollWidthAndHeight(element) {\r\n            return [\r\n                getBq().getScrollWidth(element),\r\n                getBq().getScrollHeight(element)\r\n            ];\r\n        }\r\n\r\n        //#endregion \r\n\r\n\r\n        //#region Scroll Left\r\n\r\n        getScrollLeft(element) {\r\n            return element.scrollLeft;\r\n        }\r\n\r\n        getScrollTop(element) {\r\n            return element.scrollTop;\r\n        }\r\n\r\n        getScrollLeftAndTop(element) {\r\n            return [\r\n                getBq().getScrollLeft(element),\r\n                getBq().getScrollTop(element)\r\n            ];\r\n        }\r\n\r\n        //#endregion\r\n\r\n        //#region element's position\r\n\r\n        getPositionInViewport(element) {\r\n            var rect = element.getBoundingClientRect();\r\n            return {\r\n                x: rect.left,\r\n                y: rect.top,\r\n                width: rect.width,\r\n                height: rect.height\r\n            }\r\n        };\r\n\r\n        getElementLeftInDoc(element) {\r\n            var actualLeft = element.offsetLeft;\r\n            var current = element.offsetParent;\r\n\r\n            while (typeof current !== \"undefined\" && current !== null) {\r\n                actualLeft += current.offsetLeft;\r\n                current = current.offsetParent;\r\n            }\r\n\r\n            return actualLeft;\r\n        }\r\n\r\n        getElementTopInDoc(element) {\r\n            var actualTop = element.offsetTop;\r\n            var current = element.offsetParent;\r\n            while (typeof current !== \"undefined\" && current !== null) {\r\n                actualTop += current.offsetTop;\r\n                current = current.offsetParent;\r\n            }\r\n\r\n            return actualTop;\r\n        }\r\n\r\n        getPositionInDoc(element) {\r\n            var that = getBq();\r\n            var rect = {\r\n                x: that.getElementLeftInDoc(element),\r\n                y: that.getElementTopInDoc(element),\r\n                width: that.getWidth(element, true),\r\n                height: that.getHeight(element, true)\r\n            };\r\n            return rect;\r\n        };\r\n\r\n        //#endregion position\r\n\r\n\r\n        /**\r\n         *\r\n         * @param {any} dom\r\n         * @param {any} options\r\n         *  {\r\n                // draggable element must in viewport?\r\n                bool InViewport { get; set; } = true;\r\n        \r\n                // which draggable element's sub element trigger drag event, default is draggable element\r\n                ElementReference? DragElement { get; set; } = null;\r\n            }\r\n         */\r\n        bindDrag(dom: HTMLElement, options: IDragOptions) {\r\n            function getCss(ele, prop) {\r\n                return parseInt(window.getComputedStyle(ele)[prop]);\r\n            }\r\n\r\n\r\n            var isInDrag = false;\r\n            var mX = 0;\r\n            var mY = 0;\r\n            var domStartX = 0, domStartY = 0;\r\n            var domMaxY, domMaxX;\r\n            var panelHeader;\r\n\r\n            function calcDomMax() {\r\n                domMaxY = document.documentElement.clientHeight\r\n                    - dom.offsetHeight;\r\n                domMaxX = document.documentElement.clientWidth\r\n                    - dom.offsetWidth;\r\n            }\r\n\r\n            calcDomMax();\r\n\r\n            if (options.dragElement) {\r\n                if (typeof options.dragElement === 'string') {\r\n                    panelHeader = dom.querySelector(options.dragElement);\r\n                } else {\r\n                    panelHeader = options.dragElement;\r\n                }\r\n            } else {\r\n                panelHeader = dom;\r\n            }\r\n\r\n            panelHeader.addEventListener(\"mousedown\", e => {\r\n                isInDrag = true;\r\n                mX = e.clientX;\r\n                mY = e.clientY;\r\n                dom.style.position = \"absolute\";\r\n                domStartX = getCss(dom, \"left\");\r\n                domStartY = getCss(dom, \"top\");\r\n            }, false);\r\n            window.addEventListener(\"mouseup\", e => {\r\n                isInDrag = false;\r\n                domStartX = getCss(dom, \"left\");\r\n                domStartY = getCss(dom, \"top\");\r\n            }, false);\r\n            document.addEventListener(\"mousemove\", throttle(e => {\r\n                if (isInDrag) {\r\n                    var nowX = e.clientX, nowY = e.clientY, disX = nowX - mX, disY = nowY - mY;\r\n                    var newDomX = domStartX + disX;\r\n                    var newDomY = domStartY + disY;\r\n                    if (options.inViewport) {\r\n                        if (newDomX < 0) {\r\n                            newDomX = 0;\r\n                        }\r\n                        else if (newDomX > domMaxX) {\r\n                            newDomX = domMaxX;\r\n                        }\r\n                        if (newDomY < 0) {\r\n                            newDomY = 0;\r\n                        }\r\n                        else if (newDomY > domMaxY) {\r\n                            newDomY = domMaxY;\r\n                        }\r\n                    }\r\n                    dom.style.left = newDomX + \"px\";\r\n                    dom.style.top = newDomY + \"px\";\r\n                }\r\n            }, dragThrottleTicks));\r\n            if (options.inViewport) {\r\n                window.addEventListener(\"resize\", throttle(e => {\r\n                    calcDomMax();\r\n\r\n                    domStartY = parseInt(dom.style.top);\r\n                    domStartX = parseInt(dom.style.left);\r\n                    if (domStartY > domMaxY) {\r\n                        if (domMaxY > 0) {\r\n                            dom.style.top = domMaxY + \"px\";\r\n                        }\r\n                    }\r\n                    if (domStartX > domMaxX) {\r\n                        dom.style.left = domMaxX + \"px\";\r\n                    }\r\n                }, dragThrottleTicks), false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    BQuery.prototype.viewport = viewport;\r\n    //#endregion\r\n\r\n    var bindEvent = () => {\r\n\r\n        //#region window events\r\n\r\n        var lastClick;\r\n        var clickTimeOut;\r\n        window.onclick = e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            var now = (new Date()).getTime();\r\n            if (lastClick && ((now - lastClick) < 230)) {\r\n                window.clearTimeout(clickTimeOut);\r\n                DotNet.invokeMethodAsync(\"BQuery\", \"WindowDbClick\", obj);\r\n                lastClick = null;\r\n            } else {\r\n                clickTimeOut = window.setTimeout(function () {\r\n                    DotNet.invokeMethodAsync(\"BQuery\", \"WindowClick\", obj);\r\n                },\r\n                    230);\r\n                lastClick = now;\r\n            }\r\n        };\r\n\r\n        window.oncontextmenu = e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowContextMenu\", obj);\r\n        };\r\n\r\n        window.onmousedown = e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowMouseDown\", obj);\r\n        };\r\n\r\n        window.onmouseup = e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowMouseUp\", obj);\r\n        };\r\n\r\n        window.onmouseover = throttle(e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowMouseOver\", obj);\r\n        }, defaultThrottleTicks);\r\n        window.onmouseout = throttle(e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowMouseOut\", obj);\r\n        }, defaultThrottleTicks);\r\n        window.onmousemove = throttle(e => {\r\n            var obj = eventConvertor.toMouseEvent(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowMouseMove\", obj);\r\n        }, defaultThrottleTicks);\r\n\r\n        window.onresize = throttle(e => {\r\n            var vwhArr = getBq().viewport.getWidthAndHeight();\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowResize\", vwhArr[0], vwhArr[1]);\r\n        }, defaultThrottleTicks);\r\n\r\n        window.onscroll = throttle(e => {\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowScroll\", e);\r\n        }, defaultThrottleTicks);\r\n\r\n        window.onclose = e => {\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowClose\", e);\r\n        };\r\n\r\n        window.onfocus = e => {\r\n            var evt = eventConvertor.toFocusEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowFocus\", evt);\r\n        };\r\n        window.onblur = e => {\r\n            var evt = eventConvertor.toFocusEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowBlur\", evt);\r\n        };\r\n\r\n        window.ontouchstart = throttle(e => {\r\n            var evt = eventConvertor.toTouchEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowTouchStart\", evt);\r\n        }, defaultThrottleTicks);\r\n        window.ontouchmove = throttle(e => {\r\n            var evt = eventConvertor.toTouchEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowTouchMove\", evt);\r\n        }, defaultThrottleTicks);\r\n        window.ontouchend = throttle(e => {\r\n            var evt = eventConvertor.toTouchEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowTouchEnd\", evt);\r\n        }, defaultThrottleTicks);\r\n        window.ontouchcancel = throttle(e => {\r\n            var evt = eventConvertor.toTouchEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowTouchCancel\", evt);\r\n        }, defaultThrottleTicks);\r\n\r\n\r\n        window.onkeydown = e => {\r\n            var evt = eventConvertor.toKeyboardEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowKeyDown\", evt);\r\n        };\r\n        window.onkeypress = e => {\r\n            var evt = eventConvertor.toKeyboardEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowKeyPress\", evt);\r\n        };\r\n        window.onkeyup = e => {\r\n            var evt = eventConvertor.toKeyboardEventArgs(e);\r\n            DotNet.invokeMethodAsync(\"BQuery\", \"WindowKeyUp\", evt);\r\n        };\r\n\r\n        //#endregion\r\n    }\r\n\r\n    let hasInited = false;\r\n    var bQueryReady = () => {\r\n        if (!hasInited) {\r\n            hasInited = true;\r\n            window.bqInit = null;\r\n            console.log(\"bQuery is Ready\");\r\n\r\n            window.bQuery = new BQuery();\r\n            window.bQuery.throttle = throttle;\r\n            window.bQuery.debounce = debounce;\r\n\r\n            bindEvent();\r\n        }\r\n    }\r\n\r\n    window.bqInit = bQueryReady;\r\n})();\r\n\r\n"]}