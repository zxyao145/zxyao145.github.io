{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/core/base.ts","src/ts/dragHelper.ts","src/ts/global.ts","src/ts/index.ts","src/ts/interop.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","throttle","fn","threshold","timeout","start","Date","_this","this","args","_i","arguments","curTime","window","clearTimeout","apply","setTimeout","getDom","selector","Element","document","querySelector","attr","key","value","dom","setAttribute","getAttribute","$","default","global_1","base_1","eventMap","Map","defaultOptions","inViewport","Dragger","prototype","getContainerPos","rect","_container","getBoundingClientRect","left","top","bindDrag","triggler","_triggler","options","_options","addEventListener","onMousedown","onMouseup","onMousemove","onResize","unbindDrag","removeEventListener","resetContainerStyle","_style","_isFirst","container","dragInViewport","_state","stopPropagation","autoDebug","console","log","state","isInDrag","mX","clientX","mY","clientY","_a","style","position","domMaxY","documentElement","clientHeight","offsetHeight","domMaxX","clientWidth","offsetWidth","domStartX","domStartY","newDomX","nowX","nowY","disX","disY","newDomY","margin","paddingBottom","bind","parseInt","Object","assign","enableDraggable","trigger","triggerEle","dragger","get","set","disableDraggable","trigglerEle","resetDraggableElePosition","invoke","sessionStorage","getItem","interop","__importStar","bcd","version","dragHelper_1","defineProperty","enumerable","minResetStyle","formRoot","lastIsNormal","rootEle","lastNormalStyle","form","right","maxResetStyle"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,MAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,MAAAO,KAAA,mBAAAF,EAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gB,uFCqDIA,EAAAK,SApDa,SAACC,EAAcC,GAC5B,IAAIC,OADwB,IAAAD,IAAAA,EAAA,KAE5B,IAAIE,GAAS,IAAIC,KACjB,OAAO,W,IAAA,IAAAC,EAAAC,KAAUC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAb,OAAAY,IAAAD,EAAAC,GAAAC,UAAAD,GAEb,IAAoBE,GAAW,IAAIN,KAEnCO,OAAOC,aAAaV,GACGD,GAAnBS,EAAUP,GAEVH,EAAGa,MALOP,KAKQC,GAClBJ,EAAQO,GAIRR,EAAUS,OAAOG,WAAW,WAExBd,EAAGa,MAAMR,EAAME,IAChBN,KAKA,SAATc,EAAUC,GACZ,OAAKA,EAGDA,aAAoBC,QACbD,EAGJE,SAASC,cAAcH,GANnB,KA2BDtB,EAAAqB,OAAAA,EAAWrB,EAAA0B,KAlBZ,SAACJ,EAA4BK,EAAaC,QAAA,IAAAA,IAAAA,EAAA,MAC/CC,EAAMR,EAAOC,GACjB,OAAIO,EACID,GACAC,EAAIC,aAAaH,EAAKC,GACfA,GAEAC,EAAIE,aAAaJ,GAGzB,MAIX,IAAMK,EAAIX,EAIYrB,EAAAgC,EAAAA,EAFtBhC,EAAAiC,QAAeD,G,6JClDf,IAAAE,EAAAxC,EAAA,YACAyC,EAAAzC,EAAA,eAEM0C,EAAW,IAAIC,IAEfC,EAAiB,CACnBC,YAAY,GAGhBC,GAwBIA,EAAAC,UAAAC,gBAAA,WACI,IAAMC,EAAO/B,KAAKgC,WAAWC,wBAC7B,MAAO,CACHC,KAAMH,EAAKG,KACXC,IAAKJ,EAAKI,MAgHlBP,EAAAC,UAAAO,SAAA,WACI,IAAMC,EAAWrC,KAAKsC,UAChBC,EAAUvC,KAAKwC,SAErBH,EAASI,iBAAiB,YAAazC,KAAK0C,aAAa,GACzDrC,OAAOoC,iBAAiB,UAAWzC,KAAK2C,WAAW,GACnD/B,SAAS6B,iBAAiB,YAAazC,KAAK4C,aACxCL,EAAQZ,YACRtB,OAAOoC,iBAAiB,SAAUzC,KAAK6C,UAAU,IAIzDjB,EAAAC,UAAAiB,WAAA,WACqB9C,KAAKsC,UAEbS,oBAAoB,YAAa/C,KAAK0C,aAAa,GAC5DrC,OAAO0C,oBAAoB,UAAW/C,KAAK2C,WAAW,GACtD/B,SAASmC,oBAAoB,YAAa/C,KAAK4C,aAC3C5C,KAAKwC,SAASb,YACdtB,OAAO0C,oBAAoB,SAAU/C,KAAK6C,UAAU,IAI5DjB,EAAAC,UAAAmB,oBAAA,WACwB,OAAhBhD,KAAKiD,SACLjD,KAAKkD,UAAW,EAChBlD,KAAKgC,WAAWd,aAAa,QAASlB,KAAKiD,UAGvDrB,GAhKI,SAAAA,EAAYS,EAAuBc,EAAwBC,GAA3D,IAAArD,EAAAC,KALQA,KAAAwC,SAAgB,KAChBxC,KAAAqD,OAAc,KACdrD,KAAAkD,UAAoB,EACpBlD,KAAAiD,OAAwB,KAyBhCjD,KAAA0C,YAAc,SAACnE,GACXA,EAAE+E,iBAAkB,EAEpBhC,EAAAiC,UAAU,WACNC,QAAQC,IAAI,iBAEhB,IAAMC,EAAQ3D,EAAKsD,OACnBK,EAAMC,UAAW,EACjBD,EAAME,GAAKrF,EAAEsF,QACbH,EAAMI,GAAKvF,EAAEwF,QACP,IAAAC,EAAgBjE,EAAK+B,kBAAnBI,EAAI8B,EAAA9B,KAAEC,EAAG6B,EAAA7B,IACjBpC,EAAKiC,WAAWiC,MAAMC,SAAW,WAEjC5C,EAAAiC,UAAU,WACNC,QAAQC,IAAI,gBAAiB1D,EAAKmD,SAAUhB,EAAMC,KAGtDuB,EAAMS,QAAUvD,SAASwD,gBAAgBC,aACnCtE,EAAKiC,WAAWsC,aAAe,EACrCZ,EAAMa,QAAU3D,SAASwD,gBAAgBI,YACnCzE,EAAKiC,WAAWyC,YAAc,EACpCf,EAAMS,QAAUT,EAAMS,QAAU,EAAI,EAAIT,EAAMS,QAC9CT,EAAMa,QAAUb,EAAMa,QAAU,EAAI,EAAIb,EAAMa,QAG1CxE,EAAKmD,WACLnD,EAAKiC,WAAWiC,MAAM/B,KAAOA,EAAO,KACpCnC,EAAKiC,WAAWiC,MAAM9B,IAAMA,EAAM,KAE7BpC,EAAKkD,SACNlD,EAAKkD,OAASlD,EAAKiC,WAAWb,aAAa,UAG/CpB,EAAKmD,UAAW,GAGpBQ,EAAMgB,UAAYxC,EAClBwB,EAAMiB,UAAYxC,GAGtBnC,KAAA2C,UAAY,SAACpE,GACTA,EAAE+E,iBAAkB,EAEpB,IAAMI,EAAQ3D,EAAKsD,OAEnBK,EAAMC,UAAW,EAEX,IAAAK,EAAgBjE,EAAK+B,kBAAnBI,EAAI8B,EAAA9B,KAAEC,EAAG6B,EAAA7B,IACjBuB,EAAMgB,UAAYxC,EAClBwB,EAAMiB,UAAYxC,GAGtBnC,KAAA4C,YAAcrB,EAAA9B,SAAS,SAAClB,GAEpB,IAOQqG,EAPFlB,EAAQ3D,EAAKsD,OACfK,EAAMC,WACFkB,EAAOtG,EAAEsF,QACTiB,EAAOvG,EAAEwF,QACTgB,EAAOF,EAAOnB,EAAME,GACpBoB,EAAOF,EAAOpB,EAAMI,GAEpBc,EAAUlB,EAAMgB,UAAYK,EAC5BE,EAAUvB,EAAMiB,UAAYK,EAC5BjF,EAAKyC,SAASb,aACViD,EAAU,EACVA,EAAU,EAELA,EAAUlB,EAAMa,UACrBK,EAAUlB,EAAMa,SAEhBU,EAAU,EACVA,EAAU,EAELA,EAAUvB,EAAMS,UACrBc,EAAUvB,EAAMS,UAKxBpE,EAAKiC,WAAWiC,MAAMiB,OAAS,IAC/BnF,EAAKiC,WAAWiC,MAAMkB,cAAgB,IACtCpF,EAAKiC,WAAWiC,MAAM/B,KAAO0C,EAAU,KACvC7E,EAAKiC,WAAWiC,MAAM9B,IAAM8C,EAAU,OAE3C,IAAIG,KAAKpF,MAEZA,KAAA6C,SAAWtB,EAAA9B,SAAS,SAAClB,GACjB,IAAMmF,EAAQ3D,EAAKsD,OAEnBK,EAAMS,QAAUvD,SAASwD,gBAAgBC,aACnCtE,EAAKiC,WAAWsC,aAAe,EACrCZ,EAAMa,QAAU3D,SAASwD,gBAAgBI,YACnCzE,EAAKiC,WAAWyC,YAAc,EACpCf,EAAMS,QAAUT,EAAMS,QAAU,EAAI,EAAIT,EAAMS,QAC9CT,EAAMa,QAAUb,EAAMa,QAAU,EAAI,EAAIb,EAAMa,QAE9Cb,EAAMiB,UAAYU,SAAStF,EAAKiC,WAAWiC,MAAM9B,KACjDuB,EAAMgB,UAAYW,SAAStF,EAAKiC,WAAWiC,MAAM/B,MAC7CwB,EAAMiB,UAAYjB,EAAMS,SACJ,EAAhBT,EAAMS,UACNpE,EAAKiC,WAAWiC,MAAM9B,IAAMuB,EAAMS,QAAU,MAGhDT,EAAMgB,UAAYhB,EAAMa,UACxBxE,EAAKiC,WAAWiC,MAAM/B,KAAOwB,EAAMa,QAAU,OAElD,IAAIa,KAAKpF,MAhIRA,KAAKsC,UAAYD,EACjBrC,KAAKgC,WAAamB,EAClBnD,KAAKwC,SAAW8C,OAAOC,OAAO,GAAI7D,EAAgB,CAC9CC,WAAYyB,IAEhBpD,KAAKqD,OAAS,CACVM,UAAU,EACVC,GAAI,EACJE,GAAI,EACJY,UAAW,EACXC,UAAW,GAuLdvF,EAAAoG,gBAhCT,SAAyBC,EAA+BtC,EAAiCC,QAAA,IAAAA,IAAAA,GAAA,GACrF,IAAIsC,EAAanE,EAAAd,OAAOgF,GACN,MAAdC,KACIC,EAAUnE,EAASoE,IAAIF,MAEvBC,EAAU,IAAI/D,EAAQ8D,EAAYnE,EAAAd,OAAO0C,GAAaC,GACtD5B,EAASqE,IAAIH,EAAYC,IAE7BA,EAAQvD,aAwBUhD,EAAA0G,iBApB1B,SAA0BzD,GAEH,OADf0D,EAAcxE,EAAAd,OAAO4B,MAEfsD,EAAUnE,EAASoE,IAAIG,KAEzBJ,EAAQ7C,cAewB1D,EAAA4G,0BAV5C,SAAmC3D,GAEZ,OADf0D,EAAcxE,EAAAd,OAAO4B,MAEfsD,EAAUnE,EAASoE,IAAIG,KAEzBJ,EAAQ3C,wB,oICjMX5D,EAAAmE,UAdO,SAAC0C,GACuC,SAAtCC,eAAeC,QAAQ,YAEjCF,M,0hBCJP3E,EAAAxC,EAAA,YACDsH,EAAAC,EAAAvH,EAAA,cAGAuB,OAAOiG,IAAM,CACTF,QAAOA,EACPG,QAAS,QACThD,UAAWjC,EAAAiC,Y,uNCPd,IAAAiD,EAAA1H,EAAA,gBACGwG,OAAAmB,eAAArH,EAAA,kBAAA,CAAAsH,YAAA,EAAAd,IAAA,WAAA,OAAAY,EAAAhB,mBAAiBF,OAAAmB,eAAArH,EAAA,mBAAA,CAAAsH,YAAA,EAAAd,IAAA,WAAA,OAAAY,EAAAV,oBAAkBR,OAAAmB,eAAArH,EAAA,4BAAA,CAAAsH,YAAA,EAAAd,IAAA,WAAA,OAAAY,EAAAR,6BAGvC,IAAA1E,EAAAxC,EAAA,YACAyC,EAAAzC,EAAA,eAOAM,EAAAuH,cAAA,SAA8BC,EAAgCC,GAC1D,IAAIC,EAAUvF,EAAAd,OAAOmG,GACjBG,EAAiC,GAoBrC,OAnBID,IACIE,EAAOF,EAAQjG,cAAc,aAE7BgG,IACAE,EAAkBxF,EAAAT,KAAKkG,EAAM,SAE7B1F,EAAAiC,UAAU,WACNC,QAAQC,IAAI,sBAAuBsD,MAI3CzF,EAAAiC,UAAU,WACNC,QAAQC,IAAI,mBAGhBuD,EAAM/C,MAAM/B,KAAO,GACnB8E,EAAM/C,MAAM9B,IAAM,GAClB6E,EAAM/C,MAAMgD,MAAQ,IAEjBF,GAQX3H,EAAA8H,cAAA,SAA8BN,EAAgCC,GAC1D,IAAIC,EAAUvF,EAAAd,OAAOmG,GACjBG,EAAiC,GAkBrC,OAjBID,IACIE,EAAOF,EAAQjG,cAAc,aAC7BgG,IACAE,EAAkBxF,EAAAT,KAAKkG,EAAM,SAE7B1F,EAAAiC,UAAU,WACNC,QAAQC,IAAI,sBAAuBsD,MAI3CzF,EAAAiC,UAAU,WACNC,QAAQC,IAAI,mBAGhBuD,EAAM/C,MAAM/B,KAAO,GACnB8E,EAAM/C,MAAM9B,IAAM,IAEf4E","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿\r\nconst throttle = (fn: Function, threshold = 160) => {\r\n    let timeout;\r\n    var start = +new Date;\r\n    return function (...args) {\r\n        //@ts-ignore\r\n        let context = this, curTime = +new Date() - 0;\r\n        //总是干掉事件回调\r\n        window.clearTimeout(timeout);\r\n        if (curTime - start >= threshold) {\r\n            //只执行一部分方法，这些方法是在某个时间段内执行一次\r\n            fn.apply(context, args);\r\n            start = curTime;\r\n        }\r\n        else {\r\n            //让方法在脱离事件后也能执行一次\r\n            timeout = window.setTimeout(() => {\r\n                //@ts-ignore\r\n                fn.apply(this, args);\r\n            }, threshold);\r\n        }\r\n    };\r\n}\r\n\r\nconst getDom = (selector: string | Element): null | HTMLElement => {\r\n    if (!selector) {\r\n        return null;\r\n    }\r\n    if (selector instanceof Element) {\r\n        return selector as HTMLElement;\r\n    }\r\n\r\n    return document.querySelector(selector) as HTMLElement;\r\n}\r\n\r\nconst attr = (selector: string | Element, key: string, value: string | null = null) => {\r\n    let dom = getDom(selector);\r\n    if (dom) {\r\n        if (value) {\r\n            dom.setAttribute(key, value);\r\n            return value;\r\n        } else {\r\n            return dom.getAttribute(key);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nconst $ = getDom;\r\n\r\nexport default $;\r\nexport {\r\n    throttle, getDom, $, attr\r\n};","﻿\r\nimport { autoDebug } from \"./global\";\r\nimport { throttle, getDom } from \"./core/base\";\r\n\r\nconst eventMap = new Map<HTMLElement, Dragger>();\r\n\r\nconst defaultOptions = {\r\n    inViewport: true\r\n}\r\n\r\nclass Dragger {\r\n\r\n    private _triggler: HTMLElement;\r\n    private _container: HTMLElement;\r\n    private _options: any = null;\r\n    private _state: any = null;\r\n    private _isFirst: boolean = true;\r\n    private _style: string | null = null;\r\n\r\n    constructor(triggler: HTMLElement, container: HTMLElement, dragInViewport: boolean) {\r\n        this._triggler = triggler;\r\n        this._container = container;\r\n        this._options = Object.assign({}, defaultOptions, {\r\n            inViewport: dragInViewport\r\n        });\r\n        this._state = {\r\n            isInDrag: false,\r\n            mX: 0, // mouse x\r\n            mY: 0, // mouse y\r\n            domStartX: 0, // on mousedown, the mouse x\r\n            domStartY: 0, // on mousedown, the mouse y            \r\n        }\r\n    }\r\n\r\n    getContainerPos() {\r\n        const rect = this._container.getBoundingClientRect();\r\n        return {\r\n            left: rect.left,\r\n            top: rect.top\r\n        }\r\n    }\r\n\r\n    onMousedown = (e) => {\r\n        e.stopPropagation = true;\r\n\r\n        autoDebug(() => {\r\n            console.log(\"onMousedown\");\r\n        });\r\n        const state = this._state;\r\n        state.isInDrag = true;\r\n        state.mX = e.clientX;\r\n        state.mY = e.clientY;\r\n        const { left, top } = this.getContainerPos();\r\n        this._container.style.position = \"absolute\";\r\n\r\n        autoDebug(() => {\r\n            console.log(\"this._isFirst\", this._isFirst, left, top);\r\n        });\r\n\r\n        state.domMaxY = document.documentElement.clientHeight\r\n            - this._container.offsetHeight - 1;\r\n        state.domMaxX = document.documentElement.clientWidth\r\n            - this._container.offsetWidth - 1;\r\n        state.domMaxY = state.domMaxY < 0 ? 0 : state.domMaxY;\r\n        state.domMaxX = state.domMaxX < 0 ? 0 : state.domMaxX;\r\n\r\n\r\n        if (this._isFirst) {\r\n            this._container.style.left = left + 'px';\r\n            this._container.style.top = top + 'px';\r\n\r\n            if (!this._style) {\r\n                this._style = this._container.getAttribute(\"style\");\r\n            }\r\n\r\n            this._isFirst = false;\r\n        }\r\n\r\n        state.domStartX = left;\r\n        state.domStartY = top;\r\n    }\r\n\r\n    onMouseup = (e) => {\r\n        e.stopPropagation = true;\r\n\r\n        const state = this._state;\r\n\r\n        state.isInDrag = false;\r\n\r\n        const { left, top } = this.getContainerPos();\r\n        state.domStartX = left;\r\n        state.domStartY = top;\r\n    }\r\n\r\n    onMousemove = throttle((e) => {\r\n\r\n        const state = this._state;\r\n        if (state.isInDrag) {\r\n            var nowX = e.clientX,\r\n                nowY = e.clientY,\r\n                disX = nowX - state.mX,\r\n                disY = nowY - state.mY;\r\n\r\n            var newDomX = state.domStartX + disX;\r\n            var newDomY = state.domStartY + disY;\r\n            if (this._options.inViewport) {\r\n                if (newDomX < 0) {\r\n                    newDomX = 0;\r\n                }\r\n                else if (newDomX > state.domMaxX) {\r\n                    newDomX = state.domMaxX;\r\n                }\r\n                if (newDomY < 0) {\r\n                    newDomY = 0;\r\n                }\r\n                else if (newDomY > state.domMaxY) {\r\n                    newDomY = state.domMaxY;\r\n                }\r\n            }\r\n            //this._container.style.position = \"absolute\";\r\n            //console.log(\"absolute\");\r\n            this._container.style.margin = \"0\";\r\n            this._container.style.paddingBottom = \"0\";\r\n            this._container.style.left = newDomX + \"px\";\r\n            this._container.style.top = newDomY + \"px\";\r\n        }\r\n    }, 10).bind(this);\r\n\r\n    onResize = throttle((e) => {\r\n        const state = this._state;\r\n\r\n        state.domMaxY = document.documentElement.clientHeight\r\n            - this._container.offsetHeight - 1;\r\n        state.domMaxX = document.documentElement.clientWidth\r\n            - this._container.offsetWidth - 1;\r\n        state.domMaxY = state.domMaxY < 0 ? 0 : state.domMaxY;\r\n        state.domMaxX = state.domMaxX < 0 ? 0 : state.domMaxX;\r\n\r\n        state.domStartY = parseInt(this._container.style.top);\r\n        state.domStartX = parseInt(this._container.style.left);\r\n        if (state.domStartY > state.domMaxY) {\r\n            if (state.domMaxY > 0) {\r\n                this._container.style.top = state.domMaxY + \"px\";\r\n            }\r\n        }\r\n        if (state.domStartX > state.domMaxX) {\r\n            this._container.style.left = state.domMaxX + \"px\";\r\n        }\r\n    }, 10).bind(this);\r\n\r\n    bindDrag() {\r\n        const triggler = this._triggler;\r\n        const options = this._options;\r\n\r\n        triggler.addEventListener(\"mousedown\", this.onMousedown, false);\r\n        window.addEventListener(\"mouseup\", this.onMouseup, false);\r\n        document.addEventListener(\"mousemove\", this.onMousemove);\r\n        if (options.inViewport) {\r\n            window.addEventListener(\"resize\", this.onResize, false);\r\n        }\r\n    }\r\n\r\n    unbindDrag() {\r\n        const triggler = this._triggler;\r\n\r\n        triggler.removeEventListener(\"mousedown\", this.onMousedown, false);\r\n        window.removeEventListener(\"mouseup\", this.onMouseup, false);\r\n        document.removeEventListener(\"mousemove\", this.onMousemove);\r\n        if (this._options.inViewport) {\r\n            window.removeEventListener(\"resize\", this.onResize, false);\r\n        }\r\n    }\r\n\r\n    resetContainerStyle() {\r\n        if (this._style !== null) {\r\n            this._isFirst = true;\r\n            this._container.setAttribute(\"style\", this._style);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enableDraggable(trigger: HTMLElement | string, container: HTMLElement | string, dragInViewport: boolean = true) {\r\n    let triggerEle = getDom(trigger);\r\n    if (triggerEle != null) {\r\n        let dragger = eventMap.get(triggerEle);\r\n        if (!dragger) {\r\n            dragger = new Dragger(triggerEle, getDom(container)!, dragInViewport);\r\n            eventMap.set(triggerEle, dragger);\r\n        }\r\n        dragger.bindDrag();\r\n    }\r\n}\r\n\r\nfunction disableDraggable(triggler: HTMLElement | string) {\r\n    let trigglerEle = getDom(triggler);\r\n    if (trigglerEle != null) {\r\n        const dragger = eventMap.get(trigglerEle);\r\n        if (dragger) {\r\n            dragger.unbindDrag();\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetDraggableElePosition(triggler: HTMLElement | string) {\r\n    let trigglerEle = getDom(triggler);\r\n    if (trigglerEle != null) {\r\n        const dragger = eventMap.get(trigglerEle);\r\n        if (dragger) {\r\n            dragger.resetContainerStyle();\r\n        }\r\n    }\r\n}\r\n\r\nexport { enableDraggable, disableDraggable, resetDraggableElePosition };","﻿\r\nvar autoDebug = (invoke: Function) => {\r\n    var isDebug = sessionStorage.getItem(\"isDebug\") === \"true\";\r\n    if (isDebug) {\r\n        invoke();\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        bcd: any;\r\n        autoDebug: Function;\r\n    }\r\n}\r\n\r\nexport { autoDebug };\r\n","﻿import { autoDebug } from \"./global\";\r\nimport * as interop from \"./interop\";\r\n\r\n\r\nwindow.bcd = {\r\n    interop,\r\n    version: \"0.0.1\",\r\n    autoDebug: autoDebug\r\n};","﻿export {\r\n    enableDraggable, disableDraggable, resetDraggableElePosition\r\n} from \"./dragHelper\";\r\n\r\nimport { autoDebug } from \"./global\";\r\nimport { getDom, attr } from \"./core/base\";\r\n\r\n\r\n/**\r\n * for min to reset drag left and top info\r\n * @param formRoot\r\n */\r\nexport function minResetStyle(formRoot: string | HTMLElement, lastIsNormal:boolean) {\r\n    let rootEle = getDom(formRoot);\r\n    let lastNormalStyle: string | null = \"\";\r\n    if (rootEle) {\r\n        let form = rootEle.querySelector('.bcd-form') as HTMLElement;\r\n        \r\n        if (lastIsNormal) {\r\n            lastNormalStyle = attr(form, \"style\");\r\n\r\n            autoDebug(() => {\r\n                console.log(\"get lastNormalStyle\", lastNormalStyle);\r\n            });\r\n        }\r\n\r\n        autoDebug(() => {\r\n            console.log(\"minResetStyle\");\r\n        });\r\n\r\n        form!.style.left = \"\";\r\n        form!.style.top = \"\";\r\n        form!.style.right = \"\";\r\n    }\r\n    return lastNormalStyle;\r\n}\r\n\r\n\r\n/**\r\n * for min to reset drag left and top info\r\n * @param formRoot\r\n */\r\nexport function maxResetStyle(formRoot: string | HTMLElement, lastIsNormal: boolean) {\r\n    let rootEle = getDom(formRoot);\r\n    let lastNormalStyle: string | null = \"\";\r\n    if (rootEle) {\r\n        let form = rootEle.querySelector('.bcd-form') as HTMLElement;\r\n        if (lastIsNormal) {\r\n            lastNormalStyle = attr(form, \"style\");\r\n\r\n            autoDebug(() => {\r\n                console.log(\"get lastNormalStyle\", lastNormalStyle);\r\n            });\r\n        }\r\n\r\n        autoDebug(() => {\r\n            console.log(\"maxResetStyle\");\r\n        });\r\n\r\n        form!.style.left = \"\";\r\n        form!.style.top = \"\";\r\n    }\r\n    return lastNormalStyle;\r\n}"]}